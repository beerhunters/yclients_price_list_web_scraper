import csv
import time
from datetime import datetime, timedelta
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.chrome.options import Options
from selenium.common.exceptions import TimeoutException, NoSuchElementException


class Timer:
    """–ö–ª–∞—Å—Å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"""

    def __init__(self, name=""):
        self.name = name
        self.start_time = None
        self.end_time = None

    def start(self):
        self.start_time = time.time()
        print(f"üïê [{self.name}] –ù–∞—á–∞—Ç–æ –≤ {datetime.now().strftime('%H:%M:%S')}")

    def stop(self):
        self.end_time = time.time()
        duration = self.end_time - self.start_time
        print(f"‚úÖ [{self.name}] –ó–∞–≤–µ—Ä—à–µ–Ω–æ –∑–∞ {self.format_duration(duration)}")
        return duration

    def format_duration(self, seconds):
        if seconds < 60:
            return f"{seconds:.2f} —Å–µ–∫"
        elif seconds < 3600:
            minutes = int(seconds // 60)
            secs = seconds % 60
            return f"{minutes}–º {secs:.1f}—Å"
        else:
            hours = int(seconds // 3600)
            minutes = int((seconds % 3600) // 60)
            secs = seconds % 60
            return f"{hours}—á {minutes}–º {secs:.1f}—Å"


class PriceListParser:
    def __init__(self, headless=True, fast_mode=True):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞—Ä—Å–µ—Ä–∞

        Args:
            headless (bool): –ó–∞–ø—É—Å–∫ –±—Ä–∞—É–∑–µ—Ä–∞ –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
            fast_mode (bool): –í–∫–ª—é—á–∏—Ç—å —Ä–µ–∂–∏–º –±—ã—Å—Ç—Ä–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞
        """
        self.url = (
            "https://n729879.yclients.com/company/929887/personal/select-services?o="
        )
        self.driver = None
        self.data = []
        self.fast_mode = fast_mode
        self.total_timer = Timer("–û–±—â–µ–µ –≤—Ä–µ–º—è –ø–∞—Ä—Å–∏–Ω–≥–∞")
        self.setup_driver(headless)

    def setup_driver(self, headless=True):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–µ–±-–¥—Ä–∞–π–≤–µ—Ä–∞ Chrome —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è–º–∏"""
        setup_timer = Timer("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥—Ä–∞–π–≤–µ—Ä–∞")
        setup_timer.start()

        chrome_options = Options()
        if headless:
            chrome_options.add_argument("--headless")

        # –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏
        chrome_options.add_argument("--no-sandbox")
        chrome_options.add_argument("--disable-dev-shm-usage")
        chrome_options.add_argument("--disable-gpu")
        chrome_options.add_argument("--disable-blink-features=AutomationControlled")

        # –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –¥–ª—è fast_mode (–ù–ï –æ—Ç–∫–ª—é—á–∞–µ–º JavaScript!)
        if self.fast_mode:
            chrome_options.add_argument("--disable-plugins")
            chrome_options.add_argument("--disable-extensions")
            chrome_options.add_argument("--disable-web-security")
            chrome_options.add_argument("--disable-features=TranslateUI")
            chrome_options.add_argument("--disable-ipc-flooding-protection")
            chrome_options.add_argument("--disable-background-timer-throttling")
            chrome_options.add_argument("--disable-renderer-backgrounding")
            chrome_options.add_argument("--disable-backgrounding-occluded-windows")

            # –û—Ç–∫–ª—é—á–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É —Ä–µ—Å—É—Ä—Å–æ–≤, –Ω–æ –æ—Å—Ç–∞–≤–ª—è–µ–º JS
            prefs = {
                "profile.managed_default_content_settings.images": 2,  # –ë–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                "profile.managed_default_content_settings.stylesheets": 2,  # –ë–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å CSS
                "profile.managed_default_content_settings.cookies": 1,  # –†–∞–∑—Ä–µ—à–∏—Ç—å –∫—É–∫–∏
                "profile.managed_default_content_settings.javascript": 1,  # –í–ê–ñ–ù–û: –†–∞–∑—Ä–µ—à–∏—Ç—å JS
                "profile.managed_default_content_settings.plugins": 2,
                "profile.managed_default_content_settings.popups": 2,
                "profile.managed_default_content_settings.geolocation": 2,
                "profile.managed_default_content_settings.media_stream": 2,
                "profile.managed_default_content_settings.notifications": 2,
            }
            chrome_options.add_experimental_option("prefs", prefs)

        chrome_options.add_argument("--window-size=1920,1080")
        chrome_options.add_argument(
            "--user-agent=Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36"
        )
        chrome_options.add_experimental_option("excludeSwitches", ["enable-automation"])
        chrome_options.add_experimental_option("useAutomationExtension", False)

        try:
            self.driver = webdriver.Chrome(options=chrome_options)
            # –°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–∫—Ä—ã—Ç–∏—è webdriver –≤—Å–µ–≥–¥–∞ –≤—ã–ø–æ–ª–Ω—è–µ–º
            self.driver.execute_script(
                "Object.defineProperty(navigator, 'webdriver', {get: () => undefined})"
            )

            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è
            wait_time = 3 if self.fast_mode else 5
            self.driver.implicitly_wait(wait_time)

            setup_timer.stop()
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –¥—Ä–∞–π–≤–µ—Ä–∞: {e}")
            print("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ ChromeDriver —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏ –¥–æ—Å—Ç—É–ø–µ–Ω –≤ PATH")
            raise

    def wait_for_page_load(self, timeout=30):
        """–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
        load_timer = Timer("–ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã")
        load_timer.start()

        # –£–º–µ–Ω—å—à–∞–µ–º timeout –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ä–µ–∂–∏–º–∞
        if self.fast_mode:
            timeout = 20

        try:
            # –ñ–¥–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
            WebDriverWait(self.driver, 10).until(
                EC.presence_of_element_located((By.TAG_NAME, "body"))
            )
            print("–ë–∞–∑–æ–≤–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")

            # –ñ–¥–µ–º –∫–æ–≥–¥–∞ –ø–æ—è–≤—è—Ç—Å—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
            WebDriverWait(self.driver, timeout).until(
                EC.presence_of_element_located((By.CSS_SELECTOR, ".inner-container"))
            )
            print("–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –Ω–∞–π–¥–µ–Ω—ã")

        except TimeoutException:
            print("–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–∂–¥–∞—Ç—å—Å—è –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤")
            return False

        # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é JS
        initial_wait = 1 if self.fast_mode else 3
        time.sleep(initial_wait)

        print("–í—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ–∫—Ä—É—Ç–∫—É –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Å–µ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞...")
        self.scroll_to_load_all_content()

        load_timer.stop()
        return True

    def scroll_to_load_all_content(self):
        """–£–ª—É—á—à–µ–Ω–Ω–∞—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
        scroll_timer = Timer("–ü—Ä–æ–∫—Ä—É—Ç–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã")
        scroll_timer.start()

        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ä–µ–∂–∏–º–∞
        if self.fast_mode:
            scroll_step = 800
            scroll_delay = 0.1
            pause_every = 5  # –ü–∞—É–∑–∞ –∫–∞–∂–¥—ã–µ N —à–∞–≥–æ–≤
            pause_duration = 0.3
        else:
            scroll_step = 500
            scroll_delay = 0.5
            pause_every = 3
            pause_duration = 1.0

        last_height = self.driver.execute_script("return document.body.scrollHeight")
        current_position = 0
        scroll_count = 0

        # –ë–æ–ª–µ–µ —É–º–Ω–∞—è –ª–æ–≥–∏–∫–∞ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
        while True:
            # –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º
            current_position += scroll_step
            self.driver.execute_script(f"window.scrollTo(0, {current_position});")
            scroll_count += 1

            time.sleep(scroll_delay)

            # –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –¥–µ–ª–∞–µ–º –ø–∞—É–∑—É –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
            if scroll_count % pause_every == 0:
                time.sleep(pause_duration)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã—Å–æ—Ç—É –¥–æ–∫—É–º–µ–Ω—Ç–∞
            new_height = self.driver.execute_script("return document.body.scrollHeight")

            # –ï—Å–ª–∏ –¥–æ—Å—Ç–∏–≥–ª–∏ –∫–æ–Ω—Ü–∞ –∏–ª–∏ –≤—ã—Å–æ—Ç–∞ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å
            if current_position >= new_height:
                if new_height > last_height:
                    print(
                        f"–û–±–Ω–∞—Ä—É–∂–µ–Ω –Ω–æ–≤—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç. –í—ã—Å–æ—Ç–∞: {last_height} -> {new_height}"
                    )
                    last_height = new_height
                    # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø—Ä–æ–∫—Ä—É—Ç–∫—É —Å –Ω–æ–≤–æ–π –≤—ã—Å–æ—Ç–æ–π
                    continue
                else:
                    # –î–æ—Å—Ç–∏–≥–ª–∏ –∫–æ–Ω—Ü–∞, –¥–µ–ª–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é –ø—Ä–æ–∫—Ä—É—Ç–∫—É
                    self.driver.execute_script(f"window.scrollTo(0, {new_height});")
                    time.sleep(pause_duration)
                    break

            # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –≤—ã—Å–æ—Ç—É
            if new_height > last_height:
                last_height = new_height

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –ø—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –¥–æ —Å–∞–º–æ–≥–æ –∫–æ–Ω—Ü–∞ –∏ –æ–±—Ä–∞—Ç–Ω–æ
        final_height = self.driver.execute_script("return document.body.scrollHeight")
        self.driver.execute_script(f"window.scrollTo(0, {final_height});")
        time.sleep(0.5)

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞–≤–µ—Ä—Ö
        self.driver.execute_script("window.scrollTo(0, 0);")
        time.sleep(0.5)

        print(f"–ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –§–∏–Ω–∞–ª—å–Ω–∞—è –≤—ã—Å–æ—Ç–∞: {final_height}px")
        scroll_timer.stop()

    def wait_for_dynamic_content(self):
        """–û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–º"""
        content_timer = Timer("–û–∂–∏–¥–∞–Ω–∏–µ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞")
        content_timer.start()

        previous_count = 0
        stable_count = 0
        max_stable = 3 if self.fast_mode else 5

        print("üîÑ –û–∂–∏–¥–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞...")

        for attempt in range(10):  # –ú–∞–∫—Å–∏–º—É–º 10 –ø–æ–ø—ã—Ç–æ–∫
            # –°—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
            containers = self.driver.find_elements(By.CSS_SELECTOR, ".inner-container")
            current_count = len(containers)

            if current_count > previous_count:
                print(
                    f"  üì¶ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤: {current_count} (+{current_count - previous_count})"
                )
                previous_count = current_count
                stable_count = 0
            else:
                stable_count += 1
                print(f"  ‚è≥ –ü—Ä–æ–≤–µ—Ä–∫–∞ {attempt + 1}/10... –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤: {current_count}")

            # –ï—Å–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–∞–±–∏–ª—å–Ω–æ, –∑–∞–≤–µ—Ä—à–∞–µ–º –æ–∂–∏–¥–∞–Ω–∏–µ
            if stable_count >= max_stable:
                print(f"  ‚úÖ –ö–æ–Ω—Ç–µ–Ω—Ç —Å—Ç–∞–±–∏–ª–∏–∑–∏—Ä–æ–≤–∞–ª—Å—è –Ω–∞ {current_count} –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞—Ö")
                break

            time.sleep(0.5 if self.fast_mode else 1.0)

        content_timer.stop()
        return previous_count

    def parse_services(self):
        """–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ —É—Å–ª—É–≥ –ø–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞–º"""
        parse_timer = Timer("–ü–∞—Ä—Å–∏–Ω–≥ —É—Å–ª—É–≥")
        parse_timer.start()

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        container_count = self.wait_for_dynamic_content()

        # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –æ–¥–Ω–∏–º –∑–∞–ø—Ä–æ—Å–æ–º
        containers_timer = Timer("–ü–æ–∏—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤")
        containers_timer.start()

        containers = self.driver.find_elements(
            By.CSS_SELECTOR, ".inner-container.ng-star-inserted"
        )
        if not containers:
            containers = self.driver.find_elements(By.CLASS_NAME, "inner-container")

        containers_timer.stop()
        print(f"–ù–∞–π–¥–µ–Ω–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞: {len(containers)}")

        if len(containers) == 0:
            print("‚ö†Ô∏è –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã.")
            return False

        total_services = 0
        processed_containers = 0

        # –£–º–µ–Ω—å—à–∞–µ–º —Ä–∞–∑–º–µ—Ä –ø–∞–∫–µ—Ç–∞ –¥–ª—è –ª—É—á—à–µ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª—è
        batch_size = 10 if self.fast_mode else 5

        print(f"\nüîÑ –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É {len(containers)} –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤...")
        print("=" * 50)

        for i in range(0, len(containers), batch_size):
            batch_num = i // batch_size + 1
            total_batches = (len(containers) + batch_size - 1) // batch_size

            print(
                f"\nüì¶ –ü–∞–∫–µ—Ç {batch_num}/{total_batches} (–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã {i+1}-{min(i+batch_size, len(containers))})"
            )

            batch_timer = Timer(f"–ü–∞–∫–µ—Ç {batch_num}")
            batch_timer.start()

            batch = containers[i : i + batch_size]
            batch_services = 0

            for j, container in enumerate(batch):
                container_index = i + j

                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥–æ–≥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
                print(
                    f"  ‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä {container_index + 1}...",
                    end="",
                    flush=True,
                )

                try:
                    # –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                    category_name = self.extract_category_from_container(container)

                    if not category_name:
                        print(" ‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                        continue

                    # –£—Å–∫–æ—Ä–µ–Ω–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —É—Å–ª—É–≥
                    services = self.extract_services_from_container(
                        container, category_name
                    )

                    service_count = len(services)
                    batch_services += service_count
                    total_services += service_count
                    processed_containers += 1

                    print(f" ‚úÖ {category_name} ({service_count} —É—Å–ª—É–≥)")

                except Exception as e:
                    print(f" ‚ùå –û—à–∏–±–∫–∞: {str(e)[:50]}...")
                    if not self.fast_mode:
                        print(f"    –ü–æ–ª–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
                    continue

            batch_timer.stop()
            print(f"  üìä –ü–∞–∫–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω: {batch_services} —É—Å–ª—É–≥ –¥–æ–±–∞–≤–ª–µ–Ω–æ")

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å
            progress = ((i + batch_size) / len(containers)) * 100
            print(f"  üìà –û–±—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å: {progress:.1f}% ({total_services} —É—Å–ª—É–≥)")

        print("\n" + "=" * 50)
        print(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤: {processed_containers}")
        print(f"üìã –í—Å–µ–≥–æ –∏–∑–≤–ª–µ—á–µ–Ω–æ —É—Å–ª—É–≥: {total_services}")

        parse_timer.stop()
        return len(self.data) > 0

    def extract_category_from_container(self, container):
        """–ë—ã—Å—Ç—Ä–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        category_selectors = [
            ".label.category-title",
            ".category-title",
            ".service_category_title",
            ".category-label",
            "h2",
            "h3",
        ]

        for selector in category_selectors:
            try:
                category_elements = container.find_elements(By.CSS_SELECTOR, selector)
                if category_elements:
                    category_text = category_elements[0].text.strip()
                    if category_text:
                        return category_text
            except:
                continue

        return None

    def extract_services_from_container(self, container, category_name):
        """–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —É—Å–ª—É–≥"""
        services = []

        # –ë—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫ –∫–∞—Ä—Ç–æ—á–µ–∫ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º–∏ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞–º–∏
        service_selectors = [
            ".card-content-container",
            ".service-card",
            ".service-item",
            ".list-item",
            ".service",
        ]

        service_cards = []
        for selector in service_selectors:
            service_cards = container.find_elements(By.CSS_SELECTOR, selector)
            if service_cards:
                break

        if not service_cards:
            # –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —á–µ—Ä–µ–∑ –±–æ–ª–µ–µ –æ–±—â–∏–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã
            service_cards = container.find_elements(
                By.CSS_SELECTOR, "div[class*='card']"
            )

        for card in service_cards:
            try:
                service_data = self.extract_service_data_from_card(card, category_name)
                if service_data:
                    services.append(service_data)
                    self.data.append(service_data)
            except:
                continue

        return services

    def extract_service_data_from_card(self, card, category_name):
        """–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –∫–∞—Ä—Ç–æ—á–∫–∏ —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–µ–π"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤–µ—Å—å —Ç–µ–∫—Å—Ç –∫–∞—Ä—Ç–æ—á–∫–∏ –æ–¥–∏–Ω —Ä–∞–∑
            card_text = card.text.strip()
            if not card_text:
                return None

            # 1. –ù–ê–ó–í–ê–ù–ò–ï –£–°–õ–£–ì–ò - –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã
            service_name = ""
            name_selectors = [".title-block__title", ".service-title", "h3", "h4"]

            for selector in name_selectors:
                try:
                    element = card.find_element(By.CSS_SELECTOR, selector)
                    if element and element.text.strip():
                        service_name = element.text.strip()
                        break
                except:
                    continue

            if not service_name:
                return None

            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª–µ–π
            duration = ""
            description = ""
            price = ""

            # 2. –£–õ–£–ß–®–ï–ù–ù–´–ï –ü–ê–¢–¢–ï–†–ù–´ –î–õ–Ø –¢–û–ß–ù–û–ô –ö–õ–ê–°–°–ò–§–ò–ö–ê–¶–ò–ò
            import re

            # –ë–æ–ª–µ–µ —Å—Ç—Ä–æ–≥–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è —Ü–µ–Ω
            price_patterns = [
                r"^\d+\s*[-‚Äì‚Äî]\s*\d+\s*[‚ÇΩ—Ä—É–±]",  # 1000-2000‚ÇΩ
                r"^\d+\s*[‚ÇΩ—Ä—É–±]",  # 1500‚ÇΩ
                r"^–æ—Ç\s+\d+\s*[‚ÇΩ—Ä—É–±]?",  # –æ—Ç 1500‚ÇΩ
                r"^–¥–æ\s+\d+\s*[‚ÇΩ—Ä—É–±]?",  # –¥–æ 3000‚ÇΩ
                r"^\d+\s*—Ä—É–±",  # 1500 —Ä—É–±
                r"^‚ÇΩ\s*\d+",  # ‚ÇΩ1500
            ]

            # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –≤—Ä–µ–º–µ–Ω–∏
            time_patterns = [
                r"^\d+\s*–º–∏–Ω",  # 60 –º–∏–Ω
                r"^\d+\s*–º–∏–Ω—É—Ç",  # 60 –º–∏–Ω—É—Ç
                r"^\d+\s*—á",  # 2 —á
                r"^\d+\s*—á–∞—Å",  # 2 —á–∞—Å–∞
                r"^\d+:\d+",  # 1:30
                r"^\d+\s*[-‚Äì‚Äî]\s*\d+\s*–º–∏–Ω",  # 30-60 –º–∏–Ω
            ]

            # 3. –°–ù–ê–ß–ê–õ–ê –ò–©–ï–ú –ß–ï–†–ï–ó –°–ï–õ–ï–ö–¢–û–†–´ (–Ω–∞–∏–±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω–æ)
            # –¶–µ–Ω–∞ —á–µ—Ä–µ–∑ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã
            try:
                price_element = card.find_element(
                    By.CSS_SELECTOR, ".price-range, .price, .cost"
                )
                if price_element and price_element.text.strip():
                    price = price_element.text.strip()
            except:
                pass

            # –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —á–µ—Ä–µ–∑ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã
            try:
                duration_element = card.find_element(
                    By.CSS_SELECTOR, ".comment__seance-length, .duration, .time"
                )
                if duration_element and duration_element.text.strip():
                    text = duration_element.text.strip()
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –Ω–µ —Ü–µ–Ω–∞
                    if not any(
                        re.match(pattern, text, re.IGNORECASE)
                        for pattern in price_patterns
                    ):
                        duration = text
            except:
                pass

            # –û–ø–∏—Å–∞–Ω–∏–µ —á–µ—Ä–µ–∑ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã
            try:
                desc_element = card.find_element(
                    By.CSS_SELECTOR, ".description, .service-description"
                )
                if desc_element and desc_element.text.strip():
                    text = desc_element.text.strip()
                    if text != service_name and len(text) > 10:
                        description = text
            except:
                pass

            # 4. –î–û–ü–û–õ–ù–Ø–ï–ú –î–ê–ù–ù–´–ï –ò–ó –¢–ï–ö–°–¢–ê (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —á–µ—Ä–µ–∑ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã)
            if not price or not duration or not description:
                lines = [line.strip() for line in card_text.split("\n") if line.strip()]

                # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–∫–∏ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ –¥–∞–Ω–Ω—ã—Ö
                price_candidates = []
                time_candidates = []
                description_candidates = []

                for line in lines:
                    if line == service_name:
                        continue

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Ü–µ–Ω—É (—Å—Ç—Ä–æ–≥–∏–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏)
                    is_price = False
                    for pattern in price_patterns:
                        if re.match(pattern, line, re.IGNORECASE):
                            price_candidates.append(line)
                            is_price = True
                            break

                    if is_price:
                        continue

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –≤—Ä–µ–º—è
                    is_time = False
                    for pattern in time_patterns:
                        if re.match(pattern, line, re.IGNORECASE):
                            time_candidates.append(line)
                            is_time = True
                            break

                    if is_time:
                        continue

                    # –û—Å—Ç–∞–ª—å–Ω–æ–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ–º
                    if (
                        len(line) > 15
                        and not line.isdigit()
                        and not any(char in line for char in ["‚ÇΩ", "—Ä—É–±"])
                        and not re.search(r"\d+\s*(–º–∏–Ω|—á–∞—Å|—á)", line, re.IGNORECASE)
                    ):
                        description_candidates.append(line)

                # –í—ã–±–∏—Ä–∞–µ–º –ª—É—á—à–∏—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
                if not price and price_candidates:
                    price = price_candidates[0]  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤–æ–≥–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –Ω–∞ —Ü–µ–Ω—É

                if not duration and time_candidates:
                    duration = time_candidates[0]  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤–æ–≥–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –Ω–∞ –≤—Ä–µ–º—è

                if not description and description_candidates:
                    # –í—ã–±–∏—Ä–∞–µ–º —Å–∞–º–æ–µ –¥–ª–∏–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
                    description = max(description_candidates, key=len)

            # 5. –ü–û–°–õ–ï–î–ù–Ø–Ø –ü–û–ü–´–¢–ö–ê –ù–ê–ô–¢–ò –¶–ï–ù–£ –ß–ï–†–ï–ó –ú–Ø–ì–ö–ò–ï –ü–ê–¢–¢–ï–†–ù–´
            if not price:
                # –ò—â–µ–º —á–∏—Å–ª–∞ —Å –≤–∞–ª—é—Ç–æ–π –≥–¥–µ —É–≥–æ–¥–Ω–æ –≤ —Å—Ç—Ä–æ–∫–µ
                for line in card_text.split("\n"):
                    line = line.strip()
                    if line and line != service_name:
                        # –ò—â–µ–º –ª—é–±–æ–µ —á–∏—Å–ª–æ —Å —Ä—É–±–ª—è–º–∏
                        price_match = re.search(r"\d+\s*[‚ÇΩ—Ä—É–±]", line, re.IGNORECASE)
                        if (
                            price_match and len(line) < 50
                        ):  # –ö–æ—Ä–æ—Ç–∫–∏–µ —Å—Ç—Ä–æ–∫–∏ –±–æ–ª–µ–µ –≤–µ—Ä–æ—è—Ç–Ω–æ —Ü–µ–Ω—ã
                            price = line
                            break

            return {
                "category": category_name,
                "service": service_name,
                "duration": duration,
                "description": description,
                "price": price,
            }

        except Exception as e:
            return None

    def save_to_csv(self, filename="price_list.csv"):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ CSV —Ñ–∞–π–ª"""
        save_timer = Timer("–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ CSV")
        save_timer.start()

        if not self.data:
            print("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
            return False

        try:
            with open(filename, "w", newline="", encoding="utf-8") as csvfile:
                fieldnames = ["category", "service", "duration", "description", "price"]
                writer = csv.DictWriter(csvfile, fieldnames=fieldnames)

                writer.writeheader()
                for row in self.data:
                    writer.writerow(row)

            save_timer.stop()
            print(f"–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª: {filename}")
            print(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π: {len(self.data)}")
            return True

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: {e}")
            return False

    def show_parsing_stats(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–∞—Ä—Å–∏–Ω–≥–∞"""
        if not self.data:
            return

        print(f"\n=== –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–ê–†–°–ò–ù–ì–ê ===")
        print(f"–í—Å–µ–≥–æ —É—Å–ª—É–≥: {len(self.data)}")

        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        categories = {}
        for item in self.data:
            cat = item["category"] or "–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"
            categories[cat] = categories.get(cat, 0) + 1

        print(f"–ö–∞—Ç–µ–≥–æ—Ä–∏–π: {len(categories)}")

        # –¢–æ–ø-10 –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —É—Å–ª—É–≥
        top_categories = sorted(categories.items(), key=lambda x: x[1], reverse=True)[
            :10
        ]
        print("–¢–æ–ø-10 –∫–∞—Ç–µ–≥–æ—Ä–∏–π:")
        for cat, count in top_categories:
            print(f"  - {cat}: {count} —É—Å–ª—É–≥")

        # –°—á–∏—Ç–∞–µ–º —É—Å–ª—É–≥–∏ —Å —Ü–µ–Ω–∞–º–∏
        with_prices = sum(1 for item in self.data if item["price"])
        print(f"–£—Å–ª—É–≥ —Å —Ü–µ–Ω–∞–º–∏: {with_prices}")
        print(f"–£—Å–ª—É–≥ –±–µ–∑ —Ü–µ–Ω: {len(self.data) - with_prices}")

    def run(self, output_file="price_list.csv", debug=False):
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –∑–∞–ø—É—Å–∫–∞ –ø–∞—Ä—Å–µ—Ä–∞ —Å –∏–∑–º–µ—Ä–µ–Ω–∏–µ–º –≤—Ä–µ–º–µ–Ω–∏"""
        self.total_timer.start()

        try:
            print(f"üöÄ –†–µ–∂–∏–º –ø–∞—Ä—Å–∏–Ω–≥–∞: {'–ë–´–°–¢–†–´–ô' if self.fast_mode else '–û–ë–´–ß–ù–´–ô'}")
            print(f"–ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É: {self.url}")

            page_load_timer = Timer("–ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã")
            page_load_timer.start()
            self.driver.get(self.url)
            page_load_timer.stop()

            if not self.wait_for_page_load():
                print("–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–∂–¥–∞—Ç—å—Å—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã")
                return False

            print("\n–ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥...")
            if not self.parse_services():
                print("–ü–∞—Ä—Å–∏–Ω–≥ –Ω–µ –¥–∞–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
                return False

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            self.show_parsing_stats()

            if self.save_to_csv(output_file):
                total_time = self.total_timer.stop()

                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
                print(f"\n=== –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò ===")
                print(f"‚ö° –û–±—â–µ–µ –≤—Ä–µ–º—è: {self.total_timer.format_duration(total_time)}")
                print(f"üìä –°–∫–æ—Ä–æ—Å—Ç—å: {len(self.data)/total_time:.2f} —É—Å–ª—É–≥/—Å–µ–∫")
                print(f"üéØ –†–µ–∂–∏–º: {'–ë–´–°–¢–†–´–ô' if self.fast_mode else '–û–ë–´–ß–ù–´–ô'}")

                return True
            else:
                return False

        except Exception as e:
            print(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
            return False

        finally:
            if self.driver:
                self.driver.quit()


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å –≤—ã–±–æ—Ä–æ–º —Ä–µ–∂–∏–º–∞"""
    print("=== –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–´–ô –ü–ê–†–°–ï–† –ü–†–ê–ô–°-–õ–ò–°–¢–ê ===")
    print("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã:")
    print("1. –ë–´–°–¢–†–´–ô —Ä–µ–∂–∏–º (–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –≤–∫–ª—é—á–µ–Ω—ã)")
    print("2. –û–ë–´–ß–ù–´–ô —Ä–µ–∂–∏–º (–ø–æ–ª–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞)")

    try:
        choice = input("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ä–µ–∂–∏–º–∞ (1 –∏–ª–∏ 2): ").strip()
        fast_mode = choice == "1"
    except:
        fast_mode = True  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –±—ã—Å—Ç—Ä—ã–π —Ä–µ–∂–∏–º

    print(f"\nüöÄ –ó–∞–ø—É—Å–∫ –≤ {'–ë–´–°–¢–†–û–ú' if fast_mode else '–û–ë–´–ß–ù–û–ú'} —Ä–µ–∂–∏–º–µ...")

    # –°–æ–∑–¥–∞–µ–º –ø–∞—Ä—Å–µ—Ä
    parser = PriceListParser(headless=False, fast_mode=fast_mode)

    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥
    filename = "price_list_fast.csv" if fast_mode else "price_list_normal.csv"
    success = parser.run(output_file=filename, debug=True)

    if success:
        print(f"\n‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        print(f"üìÅ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª {filename}")
    else:
        print(f"\n‚ùå –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–∞–º–∏")


if __name__ == "__main__":
    main()
